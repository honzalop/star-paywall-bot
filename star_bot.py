import os
from telegram import LabeledPrice, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

TOKEN = os.getenv("TOKEN")  # token z Render Environment Variables

# Cesty k obr√°zk≈Øm
BLURRED_IMAGE = "blurred.jpg"
ORIGINAL_IMAGE = "original.jpg"

# Cena v hvƒõzdiƒçk√°ch
PRICE = 200

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(
        photo=open(BLURRED_IMAGE, "rb"),
        caption="Obr√°zek je zamƒçen√Ω üîí\nChce≈° vidƒõt origin√°l? Napi≈° /unlock"
    )

async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prices = [LabeledPrice("Odemknut√≠ obr√°zku", PRICE)]
    await update.message.reply_invoice(
        title="Odemknut√≠",
        description="Pla≈• ‚≠ê a uvid√≠≈° ostr√Ω obr√°zek",
        payload="paywall-image",
        provider_token="",  # pr√°zdn√© = Telegram Stars
        currency="XTR",
        prices=prices,
        start_parameter="unlock"
    )

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Platba probƒõhla ‚úÖ")
    await update.message.reply_photo(photo=open(ORIGINAL_IMAGE, "rb"), caption="Tady je origin√°l üéâ")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("unlock", unlock))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.run_polling()

if __name__ == "__main__":
    main()
